@using Kartverket.ReportApi
@model Kartverket.ReportApi.ReportResult
<script src="~/Scripts/Chart.js"></script>
@{int height = 200; }
@if (ViewBag.query.Value != "register-DOK-coverage")
{
    int numberOfRows = Model.Data.Count;
    int rowHeight = 7;
    height = rowHeight * numberOfRows;
    height = height + 30; // add som extra

<canvas id="myChart" width="400" height="@height"></canvas>
<script>
@{ string label1 = ViewBag.query.Value;
    string label2 = "";
    if (label1 == "register-DOK-selectedAndAdditional")
    {
        label1 = "Antall DOK-datasett valgt";
        label2 = "Antall tilleggsdataset valgt";
    }
    else if (label1 == "register-DOK-selectedTheme")
    {
        label1 = "Antall kommuner på landsbasis som har valgt datasettet";
    }
    else
    {
        label1 = ViewBag.query.Name;
    }

}
    var dataLabels = [];
    @if (ViewBag.query.Value == "register-DOK-selectedTheme")
    {
        foreach (var d in Model.Data.ToList())
        {
        @:dataLabels.push("@Html.Raw((d.Label + " - " + d.Values[0].Key))");
        }
    }
    else
    {
        foreach (var d in Model.Data.ToList())
        {
        @:dataLabels.push("@Html.Raw((d.Label))");
        }
    }

    var dataValues = [];
    @foreach (var d in Model.Data.ToList())
    {
        @:dataValues.push("@d.Values[0].Value");
    }

    var dataValues2 = [];
    @foreach (var d in Model.Data.ToList())
    {
      @:dataValues2.push("@d.Values[1].Value");
    }


    var ctx = document.getElementById("myChart");
    var myChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: dataLabels,
            datasets: [{
                label: '@Html.Raw(label1)',
                data: dataValues,
                backgroundColor: '#7da1c4'
            }
            @if (!string.IsNullOrEmpty(label2))
            {
            @:,
                @:{
                    @:label: '@label2',
                    @:data: dataValues2,
                    @:backgroundColor: '#fe5000'
                    @:}
            }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    stacked: true
                }],
                xAxes: [{
                    stacked: true,
                    ticks: {
                        min: 0,
                        max: @(Model.Data?[0]?.TotalDataCount),
                        }
                }]
            }
        }
    });
</script>
}
